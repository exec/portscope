name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: portscope-linux-x86_64
            
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: portscope-linux-x86_64-musl
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: portscope-linux-aarch64
            
          - target: x86_64-apple-darwin
            os: macos-latest
            name: portscope-macos-x86_64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: portscope-macos-aarch64
            
          # Windows build temporarily disabled due to compilation timeout issues
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          #   name: portscope-windows-x86_64
          #   ext: .exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
        
    - name: Configure cross-compilation
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
        
    - name: Build binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          cargo build --release --target ${{ matrix.target }} --no-default-features
        else
          cargo build --release --target ${{ matrix.target }}
        fi
        
    - name: Build binary (Windows)
      if: matrix.os == 'windows-latest'
      run: cargo build --release --target ${{ matrix.target }}
        
    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ${{ matrix.name }}.tar.gz portscope
        
    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.name }}.zip portscope.exe
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          target/${{ matrix.target }}/release/${{ matrix.name }}.tar.gz
          target/${{ matrix.target }}/release/${{ matrix.name }}.zip

  build-deb:
    name: Build Debian Package
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-deb
      run: cargo install cargo-deb
      
    - name: Build Debian package
      run: cargo deb
      
    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: debian-package
        path: target/debian/*.deb

  build-macos-pkg:
    name: Build macOS Package
    runs-on: macos-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-apple-darwin,aarch64-apple-darwin
    
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: portscope-macos-*
        path: artifacts
        
    - name: Create universal binary
      run: |
        mkdir -p pkg/usr/local/bin
        # Extract binaries from tar.gz files
        cd artifacts/portscope-macos-x86_64 && tar -xzf portscope-macos-x86_64.tar.gz && cd ../..
        cd artifacts/portscope-macos-aarch64 && tar -xzf portscope-macos-aarch64.tar.gz && cd ../..
        # Create universal binary
        lipo -create \
          artifacts/portscope-macos-x86_64/portscope \
          artifacts/portscope-macos-aarch64/portscope \
          -output pkg/usr/local/bin/portscope
        chmod +x pkg/usr/local/bin/portscope
        
    - name: Install icon tools
      run: brew install librsvg
        
    - name: Convert icon to ICNS
      run: |
        mkdir -p icon.iconset
        # Create multiple sizes from SVG
        for size in 16 32 64 128 256 512; do
          rsvg-convert -w $size -h $size assets/icon.svg -o icon.iconset/icon_${size}x${size}.png
          if [ $size -le 256 ]; then
            rsvg-convert -w $((size*2)) -h $((size*2)) assets/icon.svg -o icon.iconset/icon_${size}x${size}@2x.png
          fi
        done
        iconutil -c icns icon.iconset -o portscope.icns
        
    - name: Create component package
      run: |
        pkgbuild \
          --root pkg \
          --identifier com.portscope.portscope \
          --version ${{ github.ref_name }} \
          --install-location / \
          component.pkg
        
    - name: Create product package
      run: |
        cat > distribution.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <installer-gui-script minSpecVersion="1">
          <title>PortScope</title>
          <organization>com.portscope</organization>
          <domains enable_localSystem="true"/>
          <options customize="never" require-scripts="false"/>
          <pkg-ref id="com.portscope.portscope"/>
          <choices-outline>
            <line choice="default">
              <line choice="com.portscope.portscope"/>
            </line>
          </choices-outline>
          <choice id="default"/>
          <choice id="com.portscope.portscope" visible="false">
            <pkg-ref id="com.portscope.portscope"/>
          </choice>
          <pkg-ref id="com.portscope.portscope" version="${{ github.ref_name }}" onConclusion="none">component.pkg</pkg-ref>
        </installer-gui-script>
        EOF
        
        productbuild \
          --distribution distribution.xml \
          --package-path . \
          --resources . \
          portscope-macos-universal.pkg
        
    - name: Upload macOS package
      uses: actions/upload-artifact@v4
      with:
        name: macos-package
        path: portscope-macos-universal.pkg

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, build-deb, build-macos-pkg]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/**/*.tar.gz
          artifacts/**/*.zip
          artifacts/**/*.deb
          artifacts/**/*.pkg
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}